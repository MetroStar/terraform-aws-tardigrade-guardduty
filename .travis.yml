dist: focal

language: minimal

stages:
  - lint
  - deploy

if: branch = master OR type = pull_request

before_install:
  - tmpdaemon=$(mktemp)
  - sudo jq '."registry-mirrors" += ["https://mirror.gcr.io"]' /etc/docker/daemon.json > "$tmpdaemon"
  - sudo mv "$tmpdaemon" /etc/docker/daemon.json
  - sudo systemctl daemon-reload
  - sudo systemctl restart docker
  - docker system info

jobs:
  include:
    - stage: lint
      name: Project Syntax Verification
      script: make docker/run target=lint
    # moto has not implemented GuardDuty configurations yet, so the CI test fails while running pytest.  The tests pass when run against an actual AWS account.  We need to uncomment the following lines when moto catches up.
    #- stage: test
    #  name: Apply Terraform test configs in mockstack
    #  install:
    #    - make docker-compose/install
    #    - make mockstack/up
    #  script: make mockstack/pytest PYTEST_ARGS="-k 'not create_guardduty_member and not create_guardduty_org_admin_account'"
    #  after_script:
    #    - make mockstack/clean
    - stage: deploy
      if: branch = master AND type = push AND repo = plus3it/terraform-aws-tardigrade-guardduty
      before_script:
        - |
          PRIOR_VERSION=$(git describe --abbrev=0 --tags)
          RELEASE_VERSION=$(grep current_version $TRAVIS_BUILD_DIR/.bumpversion.cfg | sed 's/^.*= //' )
          RELEASE_BODY="* [terraform-aws-tardigrade-guardduty v$RELEASE_VERSION CHANGELOG](https://github.com/plus3it/terraform-aws-tardigrade-guardduty/blob/$RELEASE_VERSION/CHANGELOG.md)"
          export PRIOR_VERSION RELEASE_VERSION RELEASE_BODY
      script: skip
      before_deploy:
        - |
          (set -x; git tag -a $RELEASE_VERSION -m $RELEASE_VERSION)
      deploy:
        provider: releases
        token: $GH_RELEASES_TOKEN
        name: $RELEASE_VERSION
        release_notes: $RELEASE_BODY
        tag_name: $RELEASE_VERSION
        target_commitish: $TRAVIS_COMMIT
        draft: false
        on:
          branch: master
          repo: plus3it/terraform-aws-tardigrade-guardduty
          condition: '"$PRIOR_VERSION" != "$RELEASE_VERSION"'
